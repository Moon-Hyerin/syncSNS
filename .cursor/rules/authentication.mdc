---
description: 
globs: 
alwaysApply: false
---
# 인증 시스템 가이드

## 인증 구조 개요

### 핵심 파일들
- **[supabase.js](mdc:lib/supabase.js)**: Supabase 클라이언트 설정 및 기본 인증 함수
- **[useAuthGuard.js](mdc:app/lib/useAuthGuard.js)**: 인증이 필요한 페이지에서 사용하는 커스텀 훅

## 인증 방식

### ✅ 권장하는 방법: `supabase.auth.getSession()`
```javascript
const { data: { session }, error } = await supabase.auth.getSession();
```

### ❌ 사용하지 않는 방법: `auth.getUser()`
- 세션 정보가 제대로 복원되지 않을 수 있음
- 새로고침 시 로그인 상태가 유지되지 않는 문제 발생

## useAuthGuard 커스텀 훅 사용법

### 기본 사용법
```javascript
import useAuthGuard from '../lib/useAuthGuard'; // 또는 적절한 경로

// 인증 확인만 하는 경우
useAuthGuard();

// 사용자 정보도 저장하는 경우
useAuthGuard((user) => setUserData({ user }));
```

### 각 페이지별 적용 예시

**대시보드 페이지**:
```javascript
const [userData, setUserData] = useState({
  user: null,
  // ... 기타 데이터
});

// 인증 확인 및 사용자 정보 설정
useAuthGuard((user) => setUserData(prev => ({ ...prev, user })));
```

**기타 페이지**:
```javascript
const [userData, setUserData] = useState({
  user: null
});

// 인증 확인 및 사용자 정보 설정
useAuthGuard((user) => setUserData({ user }));
```

## 인증 흐름

1. **페이지 로드** → `useAuthGuard` 실행
2. **세션 확인** → `supabase.auth.getSession()` 호출
3. **인증 실패** → `/login` 페이지로 리다이렉트
4. **인증 성공** → 사용자 정보 설정 (선택사항)

## 주의사항

⚠️ **절대 규칙**: 
- 새로운 페이지에서 직접 인증 로직을 구현하지 마세요
- 항상 [useAuthGuard.js](mdc:app/lib/useAuthGuard.js)를 사용하세요
- 인증 방식을 변경할 때는 useAuthGuard 한 곳만 수정하면 됩니다

## 로그인/로그아웃 처리

### 로그인
```javascript
const { data, error } = await auth.signIn(email, password);
```

### 로그아웃
```javascript
await auth.signOut();
router.push('/');
```

이 가이드를 따라 일관된 인증 시스템을 유지하고 보안을 강화합니다.

